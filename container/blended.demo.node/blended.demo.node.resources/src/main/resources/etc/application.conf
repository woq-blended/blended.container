include "akkahttp.conf"
include "akkaSslConfig.conf"
include "akkaStream.conf"

blended {

  flow {
    header {
      prefix : "App"
      transactionId : ${blended.flow.header.prefix}"FlowTransId"
      transactionState : ${blended.flow.header.prefix}"FlowTransState"
      branchId : ${blended.flow.header.prefix}"FlowBranch"
    }
  }

  streams.jms.retry {
    vendor = "activemq"
    provider = "activemq"
    retryDestination = ${blended.flow.header.prefix}."retry"
    failedDestination = ${blended.flow.header.prefix}."retryFailed"
    retryInterval = 1 minute
    maxRetries = 10
    retryTimeout = 10 minutes
  }

  persistence.h2 {
    dbPath = ${BLENDED_HOME}/h2/blended.persistence.h2
    dbUserName = "$[encrypted[4458643ec58e348aded0b170594c2b88]]"
    dbPassword = "$[encrypted[4458643ec58e348aded0b170594c2b88]]"
    options = "AUTO_SERVER=TRUE"
  }

  activemq {
    brokerstarter {
      broker {
        internal {
          brokerName: "internal"
          file: "internal.amq"
          vendor : "activemq"
          provider: "activemq"
          withSsl : true
          clientId = "internal"
        }
        external {
          brokerName: "external"
          file: "external.amq"
          vendor : "activemq"
          provider: "external"
          withSsl : true
          clientId = "external"
        }
      }
    }
  }
}

blended.security {

  module : "ldap"

  ldap {
    url = "ldap://apacheds:10389"
    systemUser = "uid=admin,ou=system"
    systemPassword = "$[encrypted[5c4e48e1920836f68f1abbaf60e9b026]]"
    userBase = "ou=users,o=blended"
    userSearch = "(uid={0})"
    groupBase = "ou=groups,o=blended"
    groupAttribute = "cn"
    groupSearch = "(member={0})"
  }

  ssl {
    keyStore = ${blended.container.home}/etc/keystore
    storePass = "blended"
    keyPass = "mysecret"

    certificates {
      default {
        provider = "default"
        commonName = "CN=server1, O=blended, C=DE"
        logicalHostnames = ["server1"]
        minValidDays = 10
      }
      logical {
        provider = "default"
        commonName = "CN=server2, O=blended, C=DE"
        logicalHostnames = ["server2"]
        minValidDays = 10
      }
    }

    validCypherSuites = [
      "TLS_RSA_WITH_AES_256_CBC_SHA256",
      "TLS_DH_RSA_WITH_AES_256_CBC_SHA256",
      "TLS_RSA_WITH_AES_256_GCM_SHA384",
      "TLS_DH_RSA_WITH_AES_256_GCM_SHA384",
      "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
      "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384",
      "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
      "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384",
      "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
      "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384",
      "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
      "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384",
      "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
      "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"
    ]

    selfsigned {
      validDays = 10
      keyStrength = 2048
      signatureAlgorithm = "SHA256withRSA"
    }

    refresher {
      minValidDays = 2
      hour = 2
      minute = 0
      onRefreshAction = restart
    }
  }
}

blended.samples.jms {
  producerInterval = 1000
  destination = "topic:SampleTopic"
  consumeSelector = "SampleCounter LIKE '%0'"
}


blended.akka.http {
  host = "0.0.0.0"
  port = 9995
  ssl {
    host = "0.0.0.0"
    port = 9996
  }
}

FixedPool {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 32
  }
  throughput = 1
}

akka {

  loggers =  ["akka.event.slf4j.Slf4jLogger"]
  loglevel = debug

  log-config-on-start = on

  actor { #akka.actor
    debug {
      receive = on
      lifecycle = on
    }
  } #akka.actor

} #akka
