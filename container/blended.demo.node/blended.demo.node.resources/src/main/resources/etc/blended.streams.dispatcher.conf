{

  defaultEventVendor = "internal"
  defaultEventProvider = "external"

  applicationLogHeader = [
    "TransactionId"
  ]

  defaultHeader = [
    { name = "ComponentName",  expression : "Dispatcher" }
    { name = "RouteName",      expression : "${{#ResourceType}}" }
    { name = "ContainerId",    expression : "${{#idSvc.uuid}}" }
    { name = "Timestamp",      expression : "${{new java.util.Date().getTime()}}" }
    { name = "MessageSrcId",   expression : "${{#idSvc.containerContext.containerHostname}}" }
    { name = "ResourceSize",   expression : "${{#envelope.flowMessage.bodySize()}}"}

    { name = "TransactionId",
      expression : "${{new java.text.SimpleDateFormat(\"yyyyMMdd-HHmmssSSS\").format(new java.util.Date(#Timestamp))}}-${{#idSvc.containerContext.nextTransactionCounter}}"
      overwrite : false
    }

    // These properties will be deleted when the dispatcher is entered if they are already set in the message
    { name : "AppBridgeVendor" }
    { name : "AppBridgeProvider" }
    { name : "AppBridgeDestination" }
  ]

  handledExceptions = [
    "blended.streams.dispatcher.internal.builder.IllegalResourceType"
  ]

  resourcetypes = {

    SampleIn {
      withCBE: false
      outbound: [
        {
          outboundHeader : [
            {
              bridgeVendor : "activemq"
              bridgeProvider : "external"
              bridgeDestination: "DispatcherOut"
            }
          ]
        }
      ]
    }

    SampleRequest {
      withCBE: false
      outbound: [
        {
          outboundHeader : [
            {
              bridgeDestination: "replyTo"
            }
          ]
        }
      ]
    }

  }
}
